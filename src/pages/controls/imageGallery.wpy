<style lang="less">
page {
  padding-top: 20rpx;
}
</style>

<template>
  <view>
    <form bindsubmit="save">
      <view class="image-panel">
        <canvas class="compress-canvas" canvas-id="imageCompressCanvas"/>

        <view class="image-avatar" wx:for="{{imageUrls}}" wx:key="index" wx:for-item="imageUrl">
          <view class="image-card image-placeholder"></view>
          <image class="image-card image-image" src="{{imageUrl}}" mode="aspectFill" data-index="{{index}}" bindtap="preview"/>
          <!-- <i class="image-card image-delete" bindtap="delete"></i> -->
          <icon class="image-delete" type="clear" size="30" color="red" data-index="{{index}}" bindtap="delete"/>
        </view>
        <view class="image-avatar" wx:if="{{imageUrls.length < 9}}">
          <view class="image-card image-placeholder" bindtap="addImage">
            <image src="../../icons/plus-light.svg"/>
          </view>
        </view>
      </view>
      <view class="panel panel-buttons">
        <button class="btn-block btn-primary" formType="submit">{{i.button_ok}}</button>
      </view>
    </form>
  </view>
</template>
<script>
import wepy from 'wepy'
import amb from '@/util/amb'
import imageService from '@/util/imageService'
import cacheService from "@/util/cacheService";

const cache = cacheService.for('images')

export default class ImageGallery extends wepy.page {
  config = {
  }

  data = {
    key: undefined,
    value: '',
    label: amb.pageI18nData.label_input,
    i: amb.pageI18nData,
    value: [],
    imageUrls: [],
    newImageMap: new Map()
  }

  methods = {
    async addImage() {
      const map = await imageService.chooseImage(9);
      if(this.value.length + map.size > 9) {
        amb.showError(this.i.image_exceed_max_count);
        return;
      }
      this.value = this.value || [];
      this.imageUrls = this.imageUrls || [];
      for (var [imageId, tempPath] of map.entries()) {
        this.value.push(imageId);
        this.imageUrls.push(tempPath);
        cache.set(imageId, tempPath);
      }
      this.updateData({
        'value': this.value,
        'imageUrls': this.imageUrls,
      });
    },
    preview(e) {
      const i = e.currentTarget.dataset.index;
      wepy.previewImage({
        current: this.imageUrls[i],
        urls: this.imageUrls
      })
    },
    delete(e) {
      const i = e.currentTarget.dataset.index;
      this.value.splice(i, 1);
      this.updateData({
        'value': this.value,
        'imageUrls': this.getImageUrls(),
      });
    },
    save(e){
      this.updateParentData(this.value);
    }
  }

  getImageUrls() {
    return this.value.map(x => cache.get(x) || imageService.getSrcUrl(x));
  }

  onLoad(options) {
    this.key = options.key || '';
    console.log('options', options);
    this.value = options.value ? options.value.split(',') : [];
    this.imageUrls = this.getImageUrls();

    this.setPageUx('activity_images'); 
    if(options.label) {
      wepy.setNavigationBarTitle({title: options.label});
    }
  }

  updateParentData(value) {
    const pages = getCurrentPages();
    const prePage = pages[pages.length - 2];
    const key = this.key;
    prePage.updateData({
      [key]: value
    });
    wepy.navigateBack();
  }
}
</script>
