<style lang="less">
</style>

<template>
  <view>
    <view class="panel">
      <navigator url="/pages/controls/input?key=activity.name&value={{activity.name}}&label={{i.activity_name}}" 
      hover-class="navigator-hover" class="required">{{i.activity_name}}<text class="value">{{activity.name}}</text>
      </navigator>
      <navigator url="/pages/controls/textarea?key=activity.info&value={{activity.info}}&label={{i.activity_info}}" 
        hover-class="navigator-hover" class="required">{{i.activity_info}}
        <text class="value text-ellipsis">{{activity.info}}</text>
      </navigator>
    </view>
    <view class="panel">
      <!-- Add mode: choose venue -->
      <picker mode="selector" wx:if="{{addMode}}" class="top-line" value="{{activity.venueId}}" bindchange="venueChange"
        range="{{venueRange}}" range-key="{{'label'}}"> 
        <view class="panel-item required">
          <text class="label">{{i.activity_venue}}</text>
          <text class="value text-ellipsis">{{venueName}}</text>
        </view>
      </picker>
      <!-- Edit mode: see venue name only -->
      <view class="panel-item" wx:if="{{!addMode}}">
        <text class="label">{{i.activity_venue}}</text>
        <text class="value text-ellipsis">{{venueName}}</text>
      </view>
      <picker mode="date" disabled="{{!addMode}}" value="{{activity.startDate}}" start="2018-01-01" end="2028-12-31" bindchange="startDateChange">  
        <view class="panel-item required">
          <text class="label">{{i.activity_start_date}}</text>
          <text class="value">{{activity.startDate}}</text>
        </view>
      </picker>
      <picker mode="date" disabled="{{!addMode}}" class="top-line" value="{{activity.endDate}}" start="2018-01-01" end="2028-12-31" bindchange="endDateChange">  
        <view class="panel-item required">
          <text class="label">{{i.activity_end_date}}</text>
          <text class="value">{{activity.endDate}}</text>
        </view>
      </picker>
      <picker mode="time" disabled="{{!addMode}}" class="top-line" value="{{activity.startTime}}" start="06:00" end="20:00" bindchange="startTimeChange">  
        <view class="panel-item required">
          <text class="label">{{i.activity_start_time}}</text>
          <text class="value">{{activity.startTime}}</text>
        </view>
      </picker>
      <picker mode="time" disabled="{{!addMode}}" class="top-line" value="{{activity.endTime}}" start="06:00" end="20:00" bindchange="endTimeChange">  
        <view class="panel-item required">
          <text class="label">{{i.activity_end_time}}</text>
          <text class="value">{{activity.endTime}}</text>
        </view>
      </picker>
    </view>
    <view class="panel">
      <navigator url="/pages/controls/imageGallery?key=activity.imageIds&value={{activity.imageIds}}&label={{i.activity_images}}" 
        hover-class="navigator-hover">{{i.activity_images}}
      </navigator>
      <view class="panel-item panel-item-v">
        <view class="label">{{i.activity_dayofweek}}</view>
        <repeat class="value" for="{{[0]}}">
          <!-- Use repeat to work around wepy component -->
          <dowSelector :value.sync="activity.daysOfWeek" key="daysOfWeek" :owner.sync="activity" :readonly.sync="!addMode"
          :definition="dowDefinition"
          class="value"></dowSelector>
        </repeat>
      </view>
      <view class="panel-item panel-item-v">
        <view class="label">{{i.cat_title}}</view>
        <repeat class="value" for="{{[0]}}">
          <!-- Use repeat to work around wepy component -->
          <categorySelector :value.sync="activity.category" key="category" :owner.sync="activity" :readonly.sync="!addMode"
          :definition="categoryDefinition"
          class="value"></categorySelector>
        </repeat>
      </view>
      <!-- <view class="panel-item">
        <text class="label">{{i.gender}}</text>
        <checkbox-group bindchange="changeGender">
          <label class="radio">
            <checkbox value="1" disabled="{{!addMode}}" checked="{{activity.gender & 1}}" color="#FFCC00"/>{{i.male}}
          </label>
          <label class="radio">
            <checkbox value="2" disabled="{{!addMode}}" checked="{{activity.gender & 2}}" color="#FFCC00"/>{{i.female}}
          </label>
        </checkbox-group>
      </view>
      <picker mode="selector" disabled="{{!addMode}}" class="top-line" value="{{activity.minAge}}" bindchange="minAgeChange"
        range="{{ageRange}}">
        <view class="panel-item">
          <text class="label">{{i.activity_min_age}}</text>
          <text class="value">{{activity.minAge}}</text>
        </view>
      </picker>
      <picker mode="selector" disabled="{{!addMode}}" class="top-line" value="{{activity.maxAge}}" bindchange="maxAgeChange"
        range="{{ageRange}}">
        <view class="panel-item">
          <text class="label">{{i.activity_max_age}}</text>
          <text class="value">{{activity.maxAge}}</text>
        </view>
      </picker> -->
      <picker mode="selector" disabled="{{!addMode}}" class="top-line" value="{{activity.capacity}}" bindchange="capChange"
        range="{{capRange}}">
        <view class="panel-item">
          <text class="label">{{i.activity_cap}}</text>
          <text class="value">{{activity.capacity}}</text>
        </view>
      </picker>
    </view>
    <!-- <view class="panel">
      <navigator disabled="{{!addMode}}" url="/pages/controls/input?key=activity.price&value={{activity.price}}&type=digit&label={{i.activity_price}}" 
      hover-class="navigator-hover">{{i.activity_price}}<text class="value">{{activity.price}}</text>
      </navigator>
      <picker mode="selector" disabled="{{!addMode}}" class="top-line" value="{{activity.currency}}" bindchange="currencyChange"
        range="{{currencyRange}}">
        <view class="panel-item">
          <text class="label">{{i.activity_currency}}</text>
          <text class="value">{{activity.currency}}</text>
        </view>
      </picker>
    </view> -->
    <view class="panel">
      <view class="panel-item">
        <button @tap="save">{{i.button_save}}</button>
      </view>
    </view>
    <view class="panel" wx:if="{{!addMode}}">
      <view class="panel-item warning">
        <button @tap="deleteOne">{{i.button_delete}}</button>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import amb from '@/util/amb';
import imageService from '@/util/imageService'
import activityService from '@/util/activityService'
import venueService from '@/util/venueService'
import mapService from '@/util/mapService'
import ValueSelector from '../components/valueSelector'

export default class EditActivity extends wepy.page {
  components = {
    dowSelector: ValueSelector,
    categorySelector: ValueSelector
	}
	data = {
    i: amb.pageI18nData,
    addMode: false,
    activity: {},
    venueName: null,
    ageRange: [],
    capRange: [],
    currencyRange: [],
    venueRange: [],
    categoryDefinition: [],
    dowDefinition: []
  };
  methods = {
    changeGender(e) {
      const value = e.detail.value.map(x => parseInt(x)).reduce((a, c) => a | c, 0);
      console.log('gender', value);
      this.updateData({
        'activity.gender': value,
      });
    },
    startDateChange(e) {
      this.updateData({
        'activity.startDate': e.detail.value
      });
    },
    startTimeChange(e) {
      this.updateData({
        'activity.startTime': e.detail.value
      });
    },
    endDateChange(e) {
      this.updateData({
        'activity.endDate': e.detail.value
      });
    },
    endTimeChange(e) {
      this.updateData({
        'activity.endTime': e.detail.value
      });
    },
    minAgeChange(e) {
      this.updateData({
        'activity.capacity': this.ageRange[e.detail.value]
      });
    },
    maxAgeChange(e) {
      this.updateData({
        'activity.capacity': this.ageRange[e.detail.value]
      });
    },
    capChange(e) {
      this.updateData({
        'activity.capacity': this.capRange[e.detail.value]
      });
    },
    currencyChange(e) {
      this.updateData({
        'activity.currency': this.currencyRange[e.detail.value],
      });
    },
    async venueChange(e) {
      const index = e.detail.value;
      if(index == 0) {
        // Use current location
        await this.setCurrentLocationAsVenue();
      }else if(index == this.venueRange.length - 1) {
        // Create new venue
        wepy.navigateTo({url: '/pages/provider/edit_venue'});
        return;
      }
      // Specified venue
      this.updateData({
        'venueName': this.venueRange[index].label,
        'activity.venueId': this.venueRange[index].id,
        'activity.location': null,
      });
    },
    async save() {
      wepy.showLoading();
      if(!this.activity.venueId) {
        await this.setCurrentLocationAsVenue();
      }
      console.log('activity to save', this.activity);
      try{
        this.activity.timeOffset = amb.config.timeOffset;
        if(this.addMode) {
          await activityService.add(this.activity);
        }else{
          await activityService.update(this.activity);
        }
      }finally{
        wepy.hideLoading();
      }

      // Refresh parent page
      const pages = getCurrentPages();
      const parentPage = pages[pages.length-2];
      parentPage.refresh();
  
      wepy.navigateBack();
    },
    async deleteOne(){
      const result = await wepy.showModal({
        title: amb.pageI18nData.activity_delete_confirm,
        content: '',
      })
      if(result.cancel) return;
      wepy.showLoading();
      console.log('activity to delete', this.activity);
      await activityService.delete(this.activity.activityId);

      // Refresh parent page
      const pages = getCurrentPages();
      const parentPage = pages[pages.length-2];
      parentPage.refresh();
  
      wepy.hideLoading();
      wepy.navigateBack();
    }
  }
	async onLoad(options) {
    const activityId = options.activityId;
    this.addMode = !activityId;
    this.setPageUx(this.addMode ? 'addactivity_title' : 'editactivity_title');
    wepy.showLoading({mask: true});
    try{
      // await this.initModel();
      if(this.addMode) {
        this.activity = {
          name: '',
          info: '',
          gender: 3,
          minAge: 0,
          maxAge: 12,
          daysOfWeek: 127,
          price: 0,
          capacity: 3,
        };
      }else{
        await this.loadActivity(activityId);
      }
    }finally{
      wepy.hideLoading();
    }
  }
  async onShow(){
    await this.initModel();
  }
  async setCurrentLocationAsVenue(){
    const address = await mapService.getCurrentAddress();
    this.updateData({
      'venueName': 'venue_current'.i18n,
      'activity.venueId': null,
      'activity.location.name': address.name,
      'activity.location.latitude': address.latitude,
      'activity.location.longitude': address.longitude,
      'activity.location.addr1': address.addr1,
      'activity.location.city': address.city,
      'activity.location.state': address.state,
      'activity.location.country': address.country,
    });
  }
  async refresh() {
    try {
      wepy.showLoading({mask: true});
      await this.initModel();
    }finally{
      wepy.hideLoading();
    }
  }
  async initModel(){
    this.capRange = [1,2,3,4,5,6,7,8,9,10,12,15,18,20,25,30,40,50,60,80,100];
    this.ageRange = [0,1,2,3,4,5,6,7,8,9,10,11,12];
    this.currencyRange = ["人民币", "AUD", "USD", "CAD", "JPY"];
    const categoryDefinition = [
        {
          label: this.i.cat_edu,
          value: 2
        },
        {
          label: this.i.cat_public,
          value: 4
        },
        {
          label: this.i.cat_care,
          value: 8
        },
        {
          label: this.i.cat_playgroup,
          value: 16
        },
        {
          label: this.i.cat_coach,
          value: 32
        },
        {
          label: this.i.cat_entertainment,
          value: 64
        },
        {
          label: this.i.cat_health,
          value: 128
        },
        {
          label: this.i.cat_new,
          value: 256
        },
        {
          label: this.i.cat_stuff,
          value: 512
        },
        {
          label: this.i.cat_other,
          value: 1
        }
      ];
    const dowDefinition = [
      {
        label: amb.pageI18nData.dow_mon_s,
        value: 1
      },
      {
        label: amb.pageI18nData.dow_tue_s,
        value: 2
      },
      {
        label: amb.pageI18nData.dow_wed_s,
        value: 4
      }, 
      {
        label: amb.pageI18nData.dow_thu_s,
        value: 8
      },
      {
        label: amb.pageI18nData.dow_fri_s,
        value: 16
      },{
        label: amb.pageI18nData.dow_sat_s,
        value: 32
      }, 
      {
        label: amb.pageI18nData.dow_sun_s,
        value: 64
      }]
    const myVenues = await venueService.getMine()
    const venueRange = myVenues.map(v => {
      return {
        id: v.venueId,
        label: venueService.getAddress(v)
      };
    });
    venueRange.unshift({
      id: null,
      label: 'venue_current'.i18n
    });
    venueRange.push({
      id: null,
      label: 'venue_add'.i18n
    });
    this.updateData({
      venueRange: venueRange,
      venueName: 'venue_current'.i18n,
      categoryDefinition,
      dowDefinition
    });
  }
  async loadActivity(activityId){
    wepy.showLoading();
    const activity = await activityService.get(activityId);
    activity.venueId = activity.venue.venueId;
    this.updateData({
      activity: activity,
      venueName: venueService.getAddress(activity.venue)
    })
    wepy.stopPullDownRefresh();
    wepy.hideLoading();
  }
}
</script>
