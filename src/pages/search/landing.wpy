<style lang="less">
.sub-title-header {
	margin-top: 20rpx;
	margin-bottom: 10rpx;
	font-size: 0.8rem;
	font-weight: bold;
}
.separator {
  margin: 40px;
}
</style>

<template>
	<view style="overflow:hidden">
		<block wx:if="{{activities.length}}">
			<text class="sub-title sub-title-header">{{i.landing_search_result}}({{activities.length}})</text>
			<view class="cards">
				<repeat for="{{activities}}">
					<searchActivityBar :style="'card'" :navigateTo="'/pages/search/view_activity?activityId=' + item.activityId" :activity.sync="item">
					</searchActivityBar>
				</repeat>
			</view>
		</block>

		<view class="separator"></view>
		<text class="sub-title sub-title-header">{{i.landing_recommended}}({{recommended.length}})</text>
		<view class="cards">
			<repeat for="{{recommended}}">
				<recommendedActivityBar :style="'card'" :navigateTo="'/pages/search/view_activity?activityId=' + item.activityId" :activity.sync="item">
				</recommendedActivityBar>
			</repeat>
		</view>
		<view class="footer-nav">
			<navigator url="/pages/search/map" class="footer-nav-item float-widget">
				<text>{{i.map_button_map}}</text>
			</navigator>
			<navigator url="/pages/search/filter" class="footer-nav-item float-widget">
				<text>{{i.map_button_filter}}</text>
			</navigator>
		</view>
	</view>
</template>
<script>
import wepy from 'wepy'
import amb from '@/util/amb'
import activityService from '@/util/activityService'
import imageService from '@/util/imageService'
import loginService from '@/util/loginService';
import mapService from '@/util/mapService';
import favoriteService from '@/util/favoriteService';
import cacheService from "@/util/cacheService";
import ActivityBar from '../components/activityBar'

export default class Landing extends wepy.page {
	config = {
		enablePullDownRefresh: false
	};
	components = {
		searchActivityBar: ActivityBar,
		recommendedActivityBar: ActivityBar
	}
	data = {
		i: null,
		showsSearchBar: false,
		lng: 0,
		lat: 0,
		activities: [],
		recommended: []
	}

	methods = {
		controltap(e) {
			if(e.controlId === 1) {
				// Current location
				this.centerByCurrentLocation();
			}else if(e.controlId === 2) {
				wepy.navigateTo({url: '/pages/search/filter'});
			}
		},
		gotoSearchConfig() {
			wepy.navigateTo({url: '/pages/search/filter'});
		},
	}

	async onLoad (options) {
		this.setPageUx('map_title');
		this.loadLastestSearchResult();
		try{
			wepy.showLoading({mask: true})
			const recommended = await activityService.getRecommended(true);
			this.updateData({
				recommended
			})
		}catch(e){
			amb.showError(e)
		}finally{
			wepy.hideLoading()
		}
	}

	pollTillLoggedIn() {
		const user = amb.config.user;
		setInterval()
	}

	async onShow() {
		this.setPageUx('map_title');
		amb.i18nTabbar();
		await this.loadLastestSearchResult();
	}

	async onPullDownRefresh () {
		await this.refreshSearch();
	}

	gotoSearchSetting() {
		wx.navigateTo({url: '/pages/search/filter'});
	}

	async loadLastestSearchResult() {
		const cached = cacheService.for('search').get();
		const activities = cached || []; // || await activityService.getRecommended(true);
		this.updateData({
			activities: activities,
		})
	}

	async refreshSearch() {
		const opt = cacheService.for('search_opt').get() || {};
		const coord = await mapService.getCurrentCoordinate();
		const query = Object.assign({
			clat: coord.latitude,
			clng: coord.longitude,
		}, opt)

		// Clean up query parameters
		Object.keys(query).forEach(k => {
			if(!query[k] && query[k] !== 0) {
				delete query[k];
			}
		})

		const activitiesTask = activityService.search(query, true);
		const recommendedTask = activityService.getRecommended(true);
		const result = await Promise.all([activitiesTask, recommendedTask]);
		this.updateData({
			activities: result[0],
			recommended: result[1]
		})
	}
}
</script>
