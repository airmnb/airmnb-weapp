<style lang="less">
@secondary-dark: #0D47A1;
@secondary: #03a9f4;

.image-scroll {
  height: 500rpx;
  z-index: -100;
  margin: 0;
  image {
    width: 100%;
  }
}

.light-text {
  color: @secondary;
}

.activity-name {
  font-size: x-large;
  color: @secondary-dark;
  display: block;
}

.activity-content {
  padding: 20rpx;
}

.activity-info-container {
  width: 100%;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  .card {
    flex: 1 1 50%;
    display: flex;
    flex-direction: row;

    .icon {
      width: 30rpx;
      height: 30rpx;
      margin: auto 20rpx auto 0;
    }
    .content {
      font-size: 1rem;
    }
  }

  .card.card-long {
    flex: 2 2 100%;
  }
}

.purchase-id {
  display: inline;
}
</style>

<template>
  <view>
    <view class="" wx:if="{{purchase}}">
      {{i.purchase_thankyou}}<text selectable="true" class="purchase-id uuid">{{purchase.purchaseId}}</text>
      <canvas style="width: 200px; height: 200px;" canvas-id="purchaseQrcode"></canvas>
    </view>
    <swiper class="panel image-scroll" indicator-dots="{{imageUrls.length>1}}" autoplay="true"
     scroll-x scroll-with-animation>
      <block wx:for="{{imageUrls}}" wx:for-item="imageUrl">
        <swiper-item>
          <image class="image-card image-image" src="{{imageUrl}}" mode="aspectFill" data-index="{{index}}" bindtap="preview"/>
        </swiper-item>
      </block>
    </swiper>
    <view class="activity-content">
      <text class="activity-name">{{activity.name}}</text>
      <text class="info-text">{{venueAddress}}</text>
      <text class="top-line">
        {{activity.info}}
      </text>
    </view>
    <view class="panel light-text">
      {{i.button_reviews}}
    </view>
    <view>
      <view class="activity-info-container">
        <view class="card">
          <image class="icon" src="../../icons/tag.svg"/>
          <text class="content">{{activity.category}}</text>
        </view>
        <view class="card" wx:if="{{activity.gender === 2}}">
          <image class="icon" src="../../icons/venus.svg"/>
          <text class="content">i.girl_only</text>
        </view>
        <view class="card" wx:if="{{activity.gender === 1}}">
          <image class="icon" src="../../icons/mars.svg"/>
          <text class="content">i.boy_only</text>
        </view>
        <view class="card">
          <repeat for="{{[0]}}">
            <!-- Use repeat to work around wepy component -->
            <dowDisplay :value="activity.daysOfWeek" 
            :labels="[i.dow_mon_s,i.dow_tue_s,i.dow_wed_s,i.dow_thu_s,i.dow_fri_s,i.dow_sat_s,i.dow_sun_s]"></dowDisplay>
          </repeat>
        </view>
        <view class="card card-long" wx:if="{{!purchase}}">
          <image class="icon" src="../../icons/calendar.svg"/>
          <text class="content">{{activity.startDate}} - {{activity.endDate}}</text>
        </view>
        <view class="card card-long">
          <image class="icon" src="../../icons/clock.svg"/>
          <text class="content">{{activity.startTime}} - {{activity.endTime}}</text>
        </view>
        <view class="card">
          <image class="icon" src="../../icons/money.svg"/>
          <text class="content">{{activity.currency}} {{activity.price}}</text>
        </view>
        <view class="card">
          <image class="icon" src="../../icons/birthday-cake.svg"/>
          <text class="content">{{activity.minAge}} - {{activity.maxAge}}</text>
        </view>
      </view>
    </view>
    <view class="panel">
      <view class="panel-item warning">
        <button @tap="check">{{i.button_check_availability}}</button>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import amb from '@/util/amb';
import imageService from '@/util/imageService'
import activityService from '@/util/activityService'
import purchaseService from '@/util/purchaseService'
import venueService from '@/util/venueService'
import mapService from '@/util/mapService'
import DowDisplay from '../components/dowDisplay'
import drawQrcode from 'weapp-qrcode'

export default class ViewActivity extends wepy.page {
  config = {
    enablePullDownRefresh: true,
  }
  components = {
		dowDisplay: DowDisplay
	}
	data = {
    i: amb.pageI18nData,
    activity: {},
    purchase: null,
    isPurchaseView: false,
    imageUrls: [],
    venueAddress: null,
  };
  methods = {
    preview(e) {
      const i = e.currentTarget.dataset.index;
      wepy.previewImage({
        current: this.imageUrls[i],
        urls: this.imageUrls
      })
    },
    check(){
      wepy.navigateTo({
        url: '/pages/search/calendarSelector?activityId=' + this.activity.activityId
      })
    },
    async save() {
      wepy.showLoading();
      if(!this.activity.venueId) {
        await this.setCurrentLocationAsVenue();
      }
      console.log('activity to save', this.activity);
      try{
        this.activity.timeOffset = amb.config.timeOffset;
        if(this.addMode) {
          await activityService.add(this.activity);
        }else{
          await activityService.update(this.activity);
        }
      }finally{
        wepy.hideLoading();
      }

      // Refresh parent page
      const pages = getCurrentPages();
      const parentPage = pages[pages.length-2];
      parentPage.refresh();
  
      wepy.navigateBack();
    },
  }
	async onLoad(options) {
    const activityId = options.activityId;
    const purchaseId = options.purchaseId;
    this.setPageUx(this.addMode ? 'addactivity_title' : 'editactivity_title');
    const aTask = this.loadActivity(activityId);
    const pTask = this.loadPurchase(purchaseId);
    await Promise.all([aTask, pTask]);
  }
  async refresh() {
    try {
      wepy.showLoading({mask: true});
      await this.initModel();
    }finally{
      wepy.hideLoading();
    }
  }
  async loadPurchase(purchaseId) {
    if(!purchaseId) return;
    const purchase = await purchaseService.get(purchaseId);
    this.updateData({
      purchase
    });
    drawQrcode({
      width: 200,
      height: 200,
      canvasId: 'purchaseQrcode',
      text: purchase.purchaseId
    })
  }
  async loadActivity(activityId){
    wepy.showLoading();
    const activity = await activityService.get(activityId);
    this.updateData({
      activity: activity,
      imageUrls: activityService.getImageUrls(activity),
      venueAddress: venueService.getAddress(activity.venue)
    })
    wepy.stopPullDownRefresh();
    wepy.hideLoading();
  }
}
</script>
