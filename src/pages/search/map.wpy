<style lang="less">


// page {
// 	height: 100%;
// }

// page > view {
// 	height: 100%;
// }


.map {
	width: 100%; 
	// height: ~"calc(100% - 110rpx)";;
	height: 640rpx;
}

.activity-panel {
  display: flex;
  flex-direction: row;
	background-color: white;
	justify-content: flex-start;
	
  .activity-card {
		padding: 5rpx;
		border: 1rpx solid red;
		width: 360rpx;
		height: 420rpx;
		display: inline-block;
		word-wrap: break-word;
		// flex: 1 1;
    // display: flex;
  	// flex-direction: column;
    // align-items: flex-start;

    .activity-avatar{
			height: 240rpx;
			width: 240rpx;
			flex: 1 1 240rpx;
      // border-radius: 10rpx;
      // flex: 0 0 240rpx;
    }

    .activity-content {
      // flex: 100%;
      margin-left: 10rpx;
      display: flex;
      flex-direction: column;
    }
  }
}

.cards {
	display: flex;
	align-items: stretch;
	padding: 10rpx;

	.card {
		position: relative;
		flex: 0 0 200rpx;
		margin: 10rpx;
		border: 1px solid #ccc;
		box-shadow: 2px 2px 6px 0px  rgba(0,0,0,0.3);
		
		image {
			// max-width: 100%;
			height: 240rpx;
			width: 360rpx;
		}

		text {
			// padding: 0 20rpx 20rpx;
			width: 360rpx;
			text-overflow: ellipsis;
			overflow: hidden;
			white-space: nowrap;
			display: block;
		}

		.text > button {
			background: gray;
			border: 0;
			color: white;
			padding: 10px;
			width: 100%;
		}
	}

	.favorite {
		position: absolute;
		padding: 20rpx;
		top: 0;
		right: 0;
		image {
			color: white;
			width: 35rpx;
			height: 35rpx;
		}
	}
}
		
</style>

<template>
	<view style="overflow:hidden">
		<!-- <view class="search-bar">
			<button @tap="gotoSearchConfig">{{keywords ? keywords : i.map_search_bar}}</button>
		</view> -->
		<map id="map" class='map' longitude="{{lng}}" latitude="{{lat}}" markers="{{markers}}" 
			scale="16" bindcontroltap="controltap" bindregionchange="regionChange"
			show-location controls="{{controls}}">
		</map>
		<!-- <scroll-view scroll-x="true" style="width: 100%; height: 300rpx">
			<navigator url="/pages/search/book?activityId={{a.activityId}}" 
			wx:for="{{activities}}" wx:key="index" wx:for-item="a" class="activity-card">
				<image class="activity-avatar" src="{{a.avatarImageUrl}}" mode="aspectFill" />
				<view class="activity-content">
					<text class="secondary-text">{{a.name}}</text>
					<text class="info-text">{{a.info}}</text>
					<text class="info-text">{{a.start}} - {{a.end}}</text>
					<text class="info-text">{{a.start}} - {{a.end}}</text>
				</view>
			</navigator>
		</scroll-view> -->

		<scroll-view scroll-x style="white-space: nowrap;">
			<view class="cards">
				<navigator url="/pages/search/view_activity?activityId={{a.activityId}}" 
				wx:for="{{activities}}" wx:key="index" wx:for-item="a" class="card">
					<image src="{{a.avatarImageUrl}}" mode="aspectFill" />
					<view class="text">
						<text class="secondary-text">{{a.name}}</text>
						<text class="info-text">{{a.info}}</text>
						<text class="info-text">{{a.start}} - {{a.end}}</text>
						<text class="info-text">{{a.start}} - {{a.end}}</text>
					</view>
					<view class="favorite" data-aid="{{a.activityId}}" data-fid="{{a.favoriteId}}" catchtap="toggleFavorite">
						<image wx:if="{{!a.favoriteId}}" data-aid="{{a.activityId}}" data-fid="{{a.favoriteId}}" src="../../icons/heart-o.svg"/>
						<image wx:if="{{a.favoriteId}}" data-aid="{{a.activityId}}" data-fid="{{a.favoriteId}}" src="../../icons/heart.svg"/>
					</view>
				</navigator>
			</view>
		</scroll-view>
	</view>
	
</template>
<script>
	import wepy from 'wepy'
	import amb from '@/util/amb'
  import activityService from '@/util/activityService'
  import imageService from '@/util/imageService'
	import loginService from '@/util/loginService';
	import mapService from '@/util/mapService';
	import favoriteService from '@/util/favoriteService';
	
	export default class Map extends wepy.page {
		config = {
			enablePullDownRefresh: true
		};
		data = {
			i: null,
			showsSearchBar: false,
			loading: true,
			lng: 0,
			lat: 0,
			controls: [{
				id: 1,
				iconPath: '/images/fa-circle-whereami.png',
				position: {
					left: 20,
					top: 10,
					width: 40,
					height: 40
				},
				clickable: true
			},{
				id: 2,
				iconPath: '/images/fa-circle-filter.png',
				position: {
					left: 80,
					top: 10,
					width: 40,
					height: 40
				},
				clickable: true
			}],
			markers: [],
			keywords: '',
			activities: []
		}

		methods = {
			controltap(e) {
				if(e.controlId === 1) {
					// Current location
					this.centerByCurrentLocation();
				}else if(e.controlId === 2) {
					wepy.navigateTo({url: '/pages/search/searchConfig'});
				}
			},
			gotoSearchConfig() {
				wepy.navigateTo({url: '/pages/search/searchConfig'});
			},
			regionChange(e) {
			// 地图发生变化的时候，获取中间点，也就是用户选择的位置
				if(e.type === 'end'){
						this.refreshMap()
				}
			},
			toggleFavorite(e){
				const activityId = e.target.dataset.aid
				const favoriteId = e.target.dataset.fid
			console.log(activityId, favoriteId, e.target.dataset)
				this.toggleFavorite(activityId, favoriteId);
				return false;
			},
		}

		async toggleFavorite(activityId, favoriteId) {
			const activity = this.activities.find(x => x.activityId === activityId);
			if(!activity) throw new Error(`Not found activity with id ${activityId}`);
			if(favoriteId) {
				favoriteService.delete(favoriteId);
				activity.favoriteId = null; 
			}else{
				activity.favoriteId = true;
				this.updateData({
					activities: this.activities
				})
				const fav = await favoriteService.add(activity);
				console.log('fav', fav, fav.favoriteId)
				activity.favoriteId = fav.favoriteId; 
			}
			this.updateData({
				activities: this.activities
			})
			return activity;
		}

		async onLoad (options) {
			
			// wepy.showLoading({mask: true});
			// // Wechat login and get Airmnb user
			// await loginService.login();
  		this.setPageUx('map_title');
			
			await this.centerByCurrentLocation();
			this.refresh();
		}

		pollTillLoggedIn() {
			const user = amb.config.user;
			setInterval()
		}

		onShow () {
  		this.setPageUx('map_title');
		}

		onPullDownRefresh () {
			this.refresh(true);
		}

		/**
		 * 页面上拉触底事件的处理函数
		 */
		onReachBottom () {
		
		}

		/**
		 * 用户点击右上角分享
		 */
		onShareAppMessage () {
		
		}

		async centerByCurrentLocation() {
			const geo = await mapService.getCurrentCoordinate();
			console.log('current geo', geo);
			this.updateData({
				lng: geo.longitude,
				lat: geo.latitude
			});
		}

		gotoSearchSetting() {
			wx.navigateTo({url: '/pages/search/searchConfig'});
		}

		async refresh() {
			await this.getMapMarkers(this.lat, this.lng);
		}

		async getMapMarkers(lat, lng, force = true) {
			wepy.showLoading({mask: false});
			const favoritesTask = favoriteService.getMyFavorites(force);
			const activitiesTask = activityService.getWithinRadius(lat, lng, 2000);
			const results = await Promise.all([favoritesTask, activitiesTask]);
			console.log('results', activitiesTask, activitiesTask, results)
			const favorites = results[0];
			const activities = results[1];
			// Attach favoriteId property
			activities.forEach(a => {
				const fav = favorites.find(x => x.activityId === a.activityId);
				a.favoriteId = fav ? fav.favoriteId : null;
			})
			const markers = mapService.activitiesToMarkers(activities);
			// markers.unshift({
			// 	id: 0,
			// 	latitude: lat,
			// 	longitude: lng,
			// });
			this.updateData({
				activities: activities,
				markers: markers,
				loading: false
			});
			wepy.hideLoading();
		}

		refreshMap() {
			const mapObj = wx.createMapContext("map");
			mapObj.getCenterLocation({
				success: async (res) => {
					await this.getMapMarkers(res.latitude, res.longitude);
				}
			});
		}
	}
</script>
