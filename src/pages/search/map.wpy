<style lang="less">


page {
	height: 100%;
}

page > view {
	height: 100%;
}


.map {
	width: 100%; 
	// height: ~"calc(100% - 110rpx)";;
	height: 100%;
}
		
</style>

<template>
	<view style="overflow:hidden">
		<map id="map" class='map' longitude="{{lng}}" latitude="{{lat}}" markers="{{markers}}" 
			scale="16" bindcontroltap="controltap" bindregionchange="regionChange"
			show-location controls="{{controls}}">
		</map>
	</view>
</template>
<script>
import wepy from 'wepy'
import amb from '@/util/amb'
import activityService from '@/util/activityService'
import imageService from '@/util/imageService'
import loginService from '@/util/loginService';
import mapService from '@/util/mapService';
import favoriteService from '@/util/favoriteService';
import ActivityBar from '../components/activityBar'
	
	export default class Map extends wepy.page {
		config = {
			enablePullDownRefresh: false
		};
		components = {
			activityBar: ActivityBar
		}
		data = {
			i: null,
			showsSearchBar: false,
			loading: true,
			lng: 0,
			lat: 0,
			controls: [{
				id: 1,
				iconPath: '/images/fa-circle-whereami.png',
				position: {
					left: 20,
					top: 10,
					width: 40,
					height: 40
				},
				clickable: true
			},{
				id: 2,
				iconPath: '/images/fa-circle-filter.png',
				position: {
					left: 80,
					top: 10,
					width: 40,
					height: 40
				},
				clickable: true
			}],
			markers: [],
			keywords: '',
			activities: []
		}

		methods = {
			controltap(e) {
				if(e.controlId === 1) {
					// Current location
					this.centerByCurrentLocation();
				}else if(e.controlId === 2) {
					wepy.navigateTo({url: '/pages/search/filter'});
				}
			},
			gotoSearchConfig() {
				wepy.navigateTo({url: '/pages/search/filter'});
			},
			regionChange(e) {
			// 地图发生变化的时候，获取中间点，也就是用户选择的位置
				if(e.type === 'end'){
						this.refreshMap()
				}
			},
			
		}



		async onLoad (options) {
			// wepy.showLoading({mask: true});
			// // Wechat login and get Airmnb user
			// await loginService.login();
  		this.setPageUx('map_title');
			await this.centerByCurrentLocation();
			this.refresh();
		}
		
		pollTillLoggedIn() {
			const user = amb.config.user;
			setInterval()
		}

		onShow () {
  		this.setPageUx('map_title');
			// amb.i18nTabbar();
		}

		onPullDownRefresh () {
			this.refresh(true);
		}

		/**
		 * 页面上拉触底事件的处理函数
		 */
		onReachBottom () {
		
		}

		/**
		 * 用户点击右上角分享
		 */
		onShareAppMessage () {
		
		}

		async centerByCurrentLocation() {
			const geo = await mapService.getCurrentCoordinate();
			console.log('current geo', geo);
			this.updateData({
				lng: geo.longitude,
				lat: geo.latitude
			});
		}

		gotoSearchSetting() {
			wx.navigateTo({url: '/pages/search/filter'});
		}

		async refresh() {
			await this.getMapMarkers(this.lat, this.lng);
		}

		async getMapMarkers(lat, lng, force = true) {
			try{
				wepy.showNavigationBarLoading()
				const favoritesTask = favoriteService.getMyFavorites(force);
				const activitiesTask = activityService.getWithinRadius(lat, lng, 2000);
				const results = await Promise.all([favoritesTask, activitiesTask]);
				console.log('results', activitiesTask, activitiesTask, results)
				const favorites = results[0];
				const activities = results[1];
				// Attach favoriteId property
				activities.forEach(a => {
					const fav = favorites.find(x => x.activityId === a.activityId);
					a.favoriteId = fav ? fav.favoriteId : null;
				})
				const markers = mapService.activitiesToMarkers(activities);
				// markers.unshift({
				// 	id: 0,
				// 	latitude: lat,
				// 	longitude: lng,
				// });
				this.updateData({
					activities: activities,
					markers: markers,
					loading: false
				});
			}finally{
				wx.hideNavigationBarLoading()
			}
		}

		refreshMap() {
			const mapObj = wx.createMapContext("map");
			mapObj.getCenterLocation({
				success: async (res) => {
					await this.getMapMarkers(res.latitude, res.longitude);
				}
			});
		}
	}
</script>
