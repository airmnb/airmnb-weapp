<style lang="less">
</style>

<template>
  <view>
    <!-- <view class="panel">
      <view class="panel-item required">
        <text class="label">{{i.account_id}}</text>
        <text class="value uuid" selectable="true">{{user.userId}}</text>
      </view>
    </view> -->

    <view class="panel">
      <input-bar label="{{i.account_name}}" value="{{user.accountName}}" bindchange="updateAccountName" required></input-bar>
    </view>
    <text class="sub-title">{{i.profile_my_info}}</text>
    <view class="panel">
      <input-bar label="{{i.fullname}}" value="{{user.fullName}}" bindchange="updateFullName"></input-bar>
      <view class="panel-item">
        <text class="label">{{i.gender}}</text>
        <radio-group class="radio-group" bindchange="setGender">
          <label class="radio">
            <radio value="1" checked="{{user.gender==1}}" color="#FFCC00"/>{{i.male}}
          </label>
          <label class="radio">
            <radio value="0" checked="{{user.gender==0}}" color="#FFCC00"/>{{i.female}}
          </label>
        </radio-group>
      </view>
      <picker class="top-line" mode="date" value="{{user.dob}}" start="2002-01-01" end="2018-12-31" bindchange="dobChange">  
        <view class="panel-item">
          <text class="label">{{i.dob}}</text>
          <text class="value">{{user.dob}}</text>
        </view>
      </picker>
      <input-bar label="{{i.mobile}}" value="{{user.phone}}" bindchange="updatePhone" type="number"></input-bar>
      <input-bar label="{{i.email}}" value="{{user.email}}" bindchange="updateEmail"></input-bar>
    </view>
    <view class="panel">
      <picker mode="selector" value="{{null}}" bindchange="langChange"
        range="{{langRange}}" range-key="{{'label'}}">
        <view class="panel-item">
          <text class="label">{{i.language}}</text>
          <text class="value">{{language}}</text>
        </view>
      </picker>
    </view>
    <text class="sub-title">{{i.babies_mine}}</text>
    <view class="image-panel">
      <navigator url="/pages/setting/edit_baby?babyId={{baby.babyId}}" class="image-avatar" wx:for="{{babies}}" wx:key="index" wx:for-item="baby">
        <view class="image-card image-placeholder">{{baby.nickName}}</view>
        <image class="image-card image-image" src="{{baby.avatarSrcUrl}}" mode="aspectFill" />
        <icon class="image-delete" type="clear" size="30" color="red" data-index="{{index}}" catchtap="deleteBaby"/>
      </navigator>
      <view class="image-avatar">
        <view class="image-card image-placeholder" bindtap="addBaby">
          <image src="../../icons/plus-light.svg"/>
        </view>
      </view>
    </view>
    <!-- <text class="sub-title">{{i.provider_profile_msg}}</text>
    <view class="panel">
      <navigator url="/pages/controls/textarea?key=user.info&value={{user.info}}&label={{i.provider_info}}" 
      hover-class="navigator-hover" class="required">{{i.provider_info}}<text class="value">{{user.info}}</text>
      </navigator>
      <navigator url="/pages/controls/textarea?key=user.certificates&value={{user.certificates}}&label={{i.provider_certificates}}" 
      hover-class="navigator-hover">{{i.provider_certificates}}<text class="value">{{user.certificates}}</text>
      </navigator>
    </view> -->
    <view class="panel panel-buttons">
      <button class="btn-block btn-primary" @tap="save">{{i.button_save}}</button>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import amb from '@/util/amb'
  import userService from '@/util/userService';
  import babyService from '@/util/babyService'
  import imageService from '@/util/imageService'

  export default class Profile extends wepy.page {
    config = {
      enablePullDownRefresh: false,
      usingComponents: {
        'input-bar': '/pages/nativeComponents/input-bar/input-bar'
      }
    }
    data = {
      i: amb.pageI18nData,
      user: {},
      babies: [],
      language: '',
      langRange: [
        {
          label: '简体中文',
          value: 'zh_CN'
        },
        {
          label: 'English',
          value: 'en'
        }],
    }

    methods = {
      updateAccountName(e){
        this.updateData({
          'user.accountName': e.detail.value
        })
      },
      updateFullName(e){
        this.updateData({
          'user.fullName': e.detail.value
        })
      },
      updatePhone(e){
        this.updateData({
          'user.phone': e.detail.value
        })
      },
      updateEmail(e){
        console.log('updateEmail', e, e.detail.value);
        this.updateData({
          'user.email': e.detail.value
        })
      },
      async save() {
        // Required fileds check
        if(!this.checkRequiredFiled()) return;
        try{
          wepy.showLoading();
          Object.assign(amb.config.user, this.user);
          await userService.save(this.user);
          wepy.hideLoading();
          wepy.navigateBack()
        }catch(e){
          amb.showError(e)
        }
      },
      setGender(e) {
        this.updateData({
          'user.gender':  parseInt(e.detail.value)
        });
      },
      dobChange(e) {
        this.updateData({
          'user.dob': e.detail.value
        });
      },
      addBaby() {
        wepy.navigateTo({
          url: '/pages/setting/edit_baby'
        });
      },
      langChange(e) {
        const index = parseInt(e.detail.value);
        const item = this.langRange[index];
        const lang = item.value;
        this.changeLanguage(lang);
        this.updateData({
          language: item.label
        });
        this.saveUserLanguage(lang);
        amb.i18nTabbar();
      },
      async deleteBaby(e) {
        const i = e.currentTarget.dataset.index;
        const baby = this.babies[i];

        const result = await amb.showConfirm(amb.pageI18nData.baby_delete_confirm)
        if(result.cancel) return;

        try{
          wepy.showLoading();
          await babyService.delete(baby.babyId);

          this.babies.splice(i, 1);
          this.updateData({
            'babies': this.babies,
          });
        } catch(e) {
          amb.showError(e);
        } finally {
          wepy.hideLoading();
        }
      },
    }

    async onLoad() {
		  this.setPageUx('profile_title');
      // this.user = this.cleanClone(amb.config.user);
      // this.user.accountName = this.user.accountName || this.user.nickName;
      if(!amb.config.user) {
        throw new Error('Impossible condition. amb.config.user must have been set when app launches');
      }
      this.setUser(amb.config.user);
      this.bindLanguageDisplay();
      await this.refresh(false);
    }

    onShow() {
      this.setPageUx('profile_title');
		  amb.i18nTabbar();
    }

    onPullDownRefresh() {
      this.refresh();
      wepy.stopPullDownRefresh();
    }

    async refresh(force = true){
      console.log('amb.config.user', amb.config.user);
      wepy.showLoading()
      try{
        const userId = amb.config.user.userId;
        const user = await userService.get(userId);
        this.setUser(user);

        // Loading babies
        const babies = await babyService.getMine(force);
        babies.forEach(x => {
          x.avatarSrcUrl = imageService.getSrcUrl(x.avatarImageId);
        })
        this.updateData({
          babies: babies
        })
      }finally{
        wepy.stopPullDownRefresh();
        wepy.hideLoading();
      }
    }

    setUser(user){
      amb.config.user = user;
      this.updateData({
        user: this.cleanClone(user),
        'user.accountName': user.accountName || user.nickName
      });
    }

    async saveUserLanguage(lang) {
      const user = amb.config.user;
      if(lang == user.language) return;
      user.language = lang;
      await userService.save(user);
    }

    bindLanguageDisplay() {
      const lang = amb.config.user.language;
      const item = this.langRange.find(x => x.value == lang);
      console.log('lang', lang, 'item', item);
      this.updateData({
        language: item ? item.label : ''
      });
    }

    changeLanguage(lang) {
      amb.chooseLanguage(lang);
      this.setPageUx('profile_title');
    }

    checkRequiredFiled() {
      return amb.checkRequired(this.user, {
        'accountName': this.i.account_name
      });
    }
  }
</script>
