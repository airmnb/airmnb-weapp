<style lang="less">
.text-elipsis { 
  text-overflow: ellipsis;
  overflow: hidden;
  width: 80rpx; 
  white-space: nowrap;
}

canvas {
  margin: 20rpx;
}
</style>

<template>
  <view>
    <view class="panel" bindtap="chooseImage2">
      <text class="sub-title">{{i.baby_avatar}}</text>
      <canvas style="width: 200px; height: 200px;" canvas-id="avatar"></canvas>
      <image src="{{baby.avatar}}"></image>
    </view>
    <view class="panel">
      <navigator url="/pages/controls/input?key=baby.nickName&value={{baby.nickName}}&label={{i.baby_nickname}}" 
      hover-class="navigator-hover">{{i.baby_nickname}}<text class="value">{{baby.nickName}}</text>
      </navigator>
    </view>
    <view class="panel">
      <picker mode="date" value="{{baby.dob}}" start="2002-01-01" end="2018-12-31" bindchange="dobChange">  
        <view class="panel-item">
          <text class="label">{{i.dob}}</text>
          <text class="value">{{baby.dob}}</text>
        </view>
      </picker>
      <view class="panel-item">
        <text class="label">{{i.gender}}</text>
        <radio-group class="radio-group" bindchange="setGender">
          <label class="radio">
            <radio value="1" checked="{{baby.gender==1}}" color="#D81B60"/>{{i.male}}
          </label>
          <label class="radio">
            <radio value="2" checked="{{baby.gender==2}}" color="#D81B60"/>{{i.female}}
          </label>
        </radio-group>
      </view>
      <navigator url="/pages/controls/textarea?key=baby.desc&value={{baby.desc}}&label={{i.baby_desc}}" 
        hover-class="navigator-hover">{{i.baby_desc}}
        <text class="value text-elipsis">{{baby.desc}}</text>
      </navigator>
    </view>
    <view class="panel">
      <view class="panel-item">
        <button @tap="save">{{i.button_save}}</button>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import amb from '@/util/amb';
import UPNG from 'upng-js'
export default class AddBaby extends wepy.page {
	data = {
    i: amb.pageI18nData,
    baby: {
      nickName: '',
      gender: '',
      dob: '',
      desc: '',
      avatar: ''
    }
  };
  methods = {
    async chooseImage2() {
      const canvasID = 'avatar'
      const imgWidth = 200
      const imgHeight = 200
      const canvas = wx.createCanvasContext(canvasID)
      const res = await wepy.chooseImage({
        count: 1,
        sizeType: ['compressed']
      });
      // 1. 绘制图片至canvas
      canvas.drawImage(res.tempFilePaths[0], 0, 0, imgWidth, imgHeight)
      // 绘制完成后执行回调，API 1.7.0
      const that = this;
      canvas.draw(false, () => {
        // 2. 获取图像数据， API 1.9.0
        wx.canvasGetImageData({
          canvasId: canvasID,
          x: 0,
          y: 0,
          width: imgWidth,
          height: imgHeight,
          success(res) {
            // 3. png编码
            let pngData = UPNG.encode([res.data.buffer], res.width, res.height)
            // 4. base64编码
            let base64 = wx.arrayBufferToBase64(pngData)
            // that.baby.avatar = `data:image/png;base64,${base64}`;
            that.updateData({
              'baby.avatar': `data:image/png;base64,${base64}`
            });
            // console.log(that.baby.avatar);
            // ...
          }
        })
      })
      return;
    },
    async chooseImage() {
      const ctx = wepy.createCanvasContext('avatar');
      const res = await wepy.chooseImage({
        count: 1,
        sizeType: ['compressed']
      });
      ctx.drawImage(res.tempFilePaths[0], 0, 0, 200, 200)
      ctx.draw(false);
      // const canvasData = await wepy.canvasGetImageData({
      //   canvasId: 'avatar',
      //   x: 0,
      //   y: 0,
      //   width: 200,
      //   height: 200,
      // })

      this.baby.avatar = await amb.getCanvasImgBase64Data('avatar', 200, 200);
      // var reader = new FileReader()
      // reader.onload = function (e) {
      //       var arrayBuffer = reader.result;
      //       var base64 = wx.arrayBufferToBase64(arrayBuffer)
      //       console.log('reader', base64);
      // }
      // reader.readAsArrayBuffer(new Blob(res.tempFilePaths[0]))

      // let pngData = upng.encode([res.data.buffer], res.width, res.height)
      // 4. base64编码
      // let base64 = wepy.arrayBufferToBase64(canvasData.data.buffer);
      // this.baby.avatar = `data:image/png;base64,${base64}`;
      console.log('this.baby.avatar', this.baby.avatar);
    },
    setGender(e) {
      this.baby.gender = e.detail.value;
    },
    dobChange(e) {
      this.updateData({
        'baby.dob': e.detail.value
      });
    },
    async save() {
      wepy.showLoading();
      console.log('baby to save', this.baby);
      wepy.hideLoading();
      wepy.navigateBack();
    }
  }
	onLoad() {
		wepy.setNavigationBarTitle({
			title: amb.pageI18nData.addbaby_title
		});
  }
  onShow() {
    console.log('baby', this.baby);
  }
}
</script>
