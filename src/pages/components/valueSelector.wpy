<style lang="less">
@gray: #D0D0D0;
@gray-dark: #888888;
@primary: #FFCC00;

.value-selector-edit {
  display: flex;
  width: 100%;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  margin: 5rpx -20rpx 5rpx 0;

  .value-selector-item {
    flex: 1 1 1;
    // max-width: 120rpx;
    display: column;
    display: flex;
    justify-content: flex-start;
    flex-direction: column;

    text, switch {
      flex: 1;
      display: block;
      text-align: center;
    }
  }
}

.value-label {
  font-size: 0.6rem;
  // font-weight: bold;
  margin: 0;
  color: @gray-dark;
  display: block;
  white-space: nowrap;
  margin: 0 1rem 0 1rem;
}

.value-tag {
  position: relative;
  font-size: 0.8rem;
  color: @gray-dark;
  white-space: nowrap;
  border: 1rpx solid @gray;
  background-color: white;
  height: 60rpx;
  min-width: 30rpx;
  border-radius: 30rpx;
  // text-align: center;
  // vertical-align: middle;
  padding: 0 30rpx 0 30rpx;
  display: flex;
  justify-content:center;
  align-content: center;
  margin: 5rpx;

  text {
    display:inline-block;
    vertical-align:middle;
    line-height:normal;
    margin:auto;
  }

  &.checked {
    background-color: @primary;
    border-color: @primary;
  }
}
</style>

<template>
  <view class="value-selector-edit">
    <block>
      value{{value}} readonly {{readonly}}
      <view class="value-selector-item" wx:for="{{definition}}" wx:key="{{index}}">
        <view class="{{(value & item.value) ? 'value-tag checked' : 'value-tag'}}" data-value="{{item.value}}" @tap="toggle">
          <text>{{item.label}}</text>
        </view>
      </view>
    </block>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import amb from '@/util/amb'
  
  export default class ValueSelector extends wepy.component {
    props = {
      value: {
        type: Number,
        twoWay: true
      },
      key: String,
      owner: {
        type: Object,
        twoWay: true
      },
      definition: Array,
      readonly: {
        type: Boolean,
        twoWay: true
      }
    }

    methods = {
      toggle(e) {
        console.log('is readonly', this.readonly, this)
        if(this.readonly) return;
        const v = e.currentTarget.dataset.value;
        this.owner[this.key] ^= v;
      },
    }
  }
</script>
