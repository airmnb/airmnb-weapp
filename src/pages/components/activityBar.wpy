<style lang="less">
@gray: #D0D0D0;

.activity-bar {
  margin-top: 20rpx;
  width: 100%;
  display: flex;
  align-items: flex-start;

  .activity-info{
    max-width: 490rpx;
  }

  .activity-avatar {
    height: 240rpx;
    // border-radius: 10rpx;
    max-width: 360rpx;
    flex: 0 0 240rpx;

    &.activity-avatar-placeholder {
      outline: 2rpx dashed @gray;
      outline-offset: -2rpx;
    }
  }
}

.activity-card {
  position: relative;
  flex: 0 0 200rpx;
  margin: 30rpx 10rpx;
  border: 1px solid #ccc;
  box-shadow: 2px 2px 6px 0px  rgba(0,0,0,0.3);

  .favorite {
    position: absolute;
    padding: 20rpx;
    top: 0;
    right: 0;
    image {
      color: white;
      width: 35rpx;
      height: 35rpx;
    }
  }

  .activity-info{
    max-width: 350rpx;
  }

  .activity-avatar {
    height: 360rpx;
    // border-radius: 10rpx;
    width: 100%;
    // flex: 0 0 240rpx;
  }
}

.activity-bar, .activity-card {
  .activity-content {
    // flex: 100%;
    margin-left: 10rpx;
    display: flex;
    padding: 20rpx 10rpx;
    flex-direction: column;
    text {
      margin-bottom: 2rpx;
    }
     .star {
       display: flex;
       flex-direction: row;
       justify-content: flex-start;
        image{
          width: 1rem;
          height: 1rem;
        }
      }
  }

  .activity-info {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    display: block;
  }
}

</style>
<template>
  <navigator url="{{navigateTo}}">
    <view class="{{'activity-' + (style || 'card')}}">
      <view class="activity-avatar-placeholder"></view>
      <image wx:if="{{activity.avatarImageUrl || style == 'bar'}}" class="{{activity.avatarImageUrl ? 'activity-avatar' : 'activity-avatar activity-avatar-placeholder'}}" src="{{activity.avatarImageUrl}}" mode="aspectFill"/>
      <view class="activity-content">
        <text class="secondary-text">{{activity.name}}</text>
        <text class="info-text">{{activity.venue.addr1}}</text>
        <text class="info-text">{{displayLocalDay}}, {{displayLocalDate}}, {{displayLocalTime}}</text>
        <text class="info-text"></text>
        <text class="info-text">{{activity.price ? i.activity_price_not_free : i.activity_price_free}}</text>
        <view class="star">
          <block wx:for="{{[1,2,3,4,5]}}" wx:key="index" data-value="{{item}}">
             <image  wx:if="{{item <= reviewStars}}" src="../../icons/star.svg"/>
             <image  wx:else src="../../icons/star-o.svg"/>
           </block>
        </view>
      </view>
      <view wx:if="{{style === 'card'}}" class="favorite" catchtap="toggleFavorite">
        <image wx:if="{{activity.favoriteId}}" src="../../icons/heart.svg"/>
        <image wx:else src="../../icons/heart-o.svg"/>
      </view>
    </view>
  </navigator>
</template>
<script>
import wepy from 'wepy';
import amb from '@/util/amb';
import favoriteService from '@/util/favoriteService';
import timeService from '@/util/timeService';

export default class ActivityBar extends wepy.component {
  props = {
    activity: {
      type: Object,
      twoWay: true
    },
    style: String,
    readonly: Boolean,
    navigateTo: String,
  }
  data = {
    i: amb.pageI18nData,
    reviewStars:3
  }
  computed = {
    displayLocalDay() {
      const temp = this.activity;
      if(!temp||!temp.startDate) {
        return '';
      }
      console.log(temp);
      let utcTime = `${temp.startDate} ${temp.startTime}`;
      const localDay = timeService.getLocalDay(utcTime);
      switch(localDay){
        case 0: return this.i['dow_sun'];
        case 1: return this.i['dow_mon'];
        case 2: return this.i['dow_tue'];
        case 3: return this.i['dow_wed'];
        case 4: return this.i['dow_thu'];
        case 5: return this.i['dow_fri'];
        case 6: return this.i['dow_sat'];
      }
      return '';
    },
    displayLocalDate() {
     const temp = this.activity;
     if(!temp){
        return '';
     }
     const utcStartTime = `${temp.startDate} ${temp.startTime}`;
     return `${timeService.getLocalDate(utcStartTime)}`;
    },
    displayLocalTime() {
     const temp = this.activity;
     if(!temp){
        return '';
     }
     const utcStartTime = `${temp.startDate} ${temp.startTime}`;
     const utcEndTime = `${temp.endDate} ${temp.endTime}`;
     return `${timeService.getLocalTime(utcStartTime)} - ${timeService.getLocalTime(utcEndTime)}`;
   }
  }
  methods = {
    toggleFavorite(e){
      this.toggleFavorite();
      return false;
    },
  }

  async toggleFavorite() {
    const favoriteId = this.activity.favoriteId;
    if(favoriteId) {
      favoriteService.delete(favoriteId);
      this.activity.favoriteId = null;
    }else{
      this.activity.favoriteId = true;
      const fav = await favoriteService.add(this.activity);
      console.log('fav', fav, fav.favoriteId)
      this.activity.favoriteId = fav.favoriteId;
      this.$apply();
    }
  }
}
</script>

